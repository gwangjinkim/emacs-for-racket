* Racket

[[https://www.linw1995.com/en/blog/Write-Racket-With-Emacs/][source]]

#+BEGIN_SRC elisp
  ;; `C-c C-,` https://emacs.stackexchange.com/questions/40571/how-to-set-a-short-cut-for-begin-src-end-src
  ;; M-x org-inster-structure-template

  ;; `C-c '`
  ;; M-x org-edit-src-code

  ;; abort
  ;; `C-c C-k`

  ;; run code block
  ;; `C-c C-c`
#+END_SRC

org-babel
https://orgmode.org/worg/org-contrib/babel/intro.html

https://qua.name/mrb/an-org-babel-based-emacs-configuration


Perhaps a more secure source is:
https://www.racket-mode.com/#Configure-Emacs-to-use-MELPA

and good:
https://gist.github.com/333fred/9c88c4bc04ecb51fda08


** add orgbabel choice

#+begin_src elisp
  (add-to-list 'org-structure-template-alist '("R" . "src R"))
  (add-to-list 'org-structure-template-alist '("r" . "src racket"))

  ;; for `<s TAB` you have to do:
  (require 'org-tempo)
#+end_src

#+RESULTS:
: org-tempo


** add ido
Better choice of files

#+begin_src elisp
  ;; ido-mode provides a better file/buffer-selection interface
  (use-package ido
	       :ensure t
	       :config (ido-mode t))
             
  ;; ido for M-x
  (use-package smex
	       :ensure t
	       :config
	       (progn
		 (smex-initialize)
		 (global-set-key (kbd "M-x") 'smex)
		 (global-set-key (kbd "M-X") 'smex-major-mode-commands)
		 ;; This is your old M-x.
		 (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)))
#+end_src




** Add Racket mode

#+begin_src elisp
  (use-package racket-mode
    :ensure t
    ;; :config
    ;; (setq racket-program "/home/josephus/miniconda3/envs/racket/bin/racket")
    :hook (racket-mode . racket-xp-mode))
    
#+end_src

#+RESULTS:
| racket-xp-mode |

see default key-binding maps from:
- racket-mode-map
- racket-xp-mode-map
- racket-xp-control-c-hash-keymap

| run                                              | C-c C-c   | racket-run-module-at-point   | pops up new repl winodw             |
| go to repl window                                | C-x o     | other-window                 |                                     |
| switch focused window to repl (launch)           | C-c C-z   | racket-repl                  | toggles focus to repl               |
| run repl and change focus to repl                | <f5>      |                              |                                     |
| describe function (move cursor on function name) | C-c C-.   | racket-xp-describe           |                                     |
| (in the repl)                                    | C-c C-.   | racket-repl-describe         |                                     |
| jump to function source                          | M-.       | racket-xp-visit-definition   |                                     |
| (in the repl)                                    | M-.       | racket-repl-visit-definition |                                     |
| jump back from function source                   | M-,       | racket-unvisit               |                                     |
| find next reference of function                  | C-c #n    | racket-xp-next-use           |                                     |
|                                                  |           |                              |                                     |
| test                                             | C-c C-t   | racket-test                  | runs submodule test of current file |
|                                                  | <C-f5>    |                              |                                     |
| jump to location of failing test                 | C-x `     |                              |                                     |
|                                                  |           |                              |                                     |
| add breakpoint on function under cursor and run  | C-u C-M-x |                              |                                     |
| open racket profile window                       | C-c C-o   | racket-run-module-at-point   | shows profiling result              |
|                                                  |           | racket-profile-mode          |                                     |
| refresh profiling result                         | g         |                              |                                     |
|                                                  |           |                              |                                     |






** Enhance Programming Experience (Optional)

#+begin_src elisp
  (use-package company
    :ensure t
    :config
    (setq company-minimum-prefix-length 2)
    (setq company-idle-delay 0.1)
    (setq company-tooltip-align-annotations t)
    :hook
    ((racket-mode . company-mode)
     (racket-repl-mode .company-mode)))
#+end_src

#+RESULTS:
| company |

** Rainbow Delimiters

Highlighting delimiters (parentheses, brackets, braces)

#+begin_src elisp

  (use-package rainbow-delimiters
    ;ensure t
    :hook
    ((racket-mode . rainbow-delimiters-mode)
     (racket-repl-mode . rainbow-delimiters-mode)))
#+end_src

#+RESULTS:
| rainbow-delimiters-mode | paredit-mode |

** paredit-mode

Structured edigiting of S-expression data.

#+begin_src elisp
  (use-package paredit
    :ensure t
    :hook
    ((racket-mode . paredit-mode)
     (racket-repl-mode . paredit-mode)))
#+end_src

#+RESULTS:
| paredit-mode |



* Correct `$HOME`

#+begin_src elisp
;; put back $HOME to $ORIG_HOME
;; in ~/.bashrc 
;; alias rktemacs="conda activate emacs && env ORIG_HOME=$HOME HOME=$HOME/emacs/emacs-for-racket emacs &"
(setenv "HOME" (getenv "ORIG_HOME"))
#+end_src
